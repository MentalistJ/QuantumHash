document.addEventListener("DOMContentLoaded", () => {
    const canvas = document.getElementById("particleCanvas");
    const ctx = canvas.getContext("2d");

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
// Garante que o canvas não seja bloqueado por outros elementos
document.getElementById("particleCanvas").style.pointerEvents = "auto";

    let particles = [];

    const config = {
        particleCount: 100,
        maxConnections: 8,
        connectionDistance: 160,
        fusionDistance: 30,
        hueRange: [200, 250],  // Azul e roxo para efeito quântico
        particleSpeed: 0.4,
        energyDecay: 0.04,
        maxSize: 12, 
        minSize: 3,
        background: 'radial-gradient(circle at center, #000311 0%, #001a38 100%)'
    };

    class Particle {
        constructor(x, y, nftID = null) {
            this.x = x;
            this.y = y;
            this.size = Math.random() * (config.maxSize - config.minSize) + config.minSize;
            this.speedX = (Math.random() - 0.5) * config.particleSpeed;
            this.speedY = (Math.random() - 0.5) * config.particleSpeed;
            this.color = this.generateColor();
            this.connections = [];
            this.life = Math.random() * 400 + 300;
            this.state = Math.random() > 0.5 ? "wave" : "particle"; 
            this.nftID = nftID || this.generateHash();
            this.energy = Math.random() * 100;
            this.history = []; // Armazena histórico de interações
        }

        generateColor() {
            return `hsl(${Math.random() * (config.hueRange[1] - config.hueRange[0]) + config.hueRange[0]}, 100%, 70%)`;
        }

        generateHash() {
            return Math.random().toString(36).substring(2, 12);
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;
            this.life--;
            this.energy -= config.energyDecay;

            if (this.size > config.minSize) this.size -= 0.02;

            // Estado quântico - pode mudar e mutar
            if (Math.random() > 0.996) {
                this.state = this.state === "wave" ? "particle" : "wave";
                this.size = Math.random() * (config.maxSize - config.minSize) + config.minSize;
                this.color = this.generateColor();
                this.nftID = this.generateHash();
            }

            this.connections = [];
            particles.forEach(other => {
                if (other !== this) {
                    let dx = other.x - this.x;
                    let dy = other.y - this.y;
                    let distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < config.connectionDistance) {
                        this.connections.push(other);

                        if (distance < config.fusionDistance && Math.random() > 0.99) {
                            if (this.energy > 30 && other.energy > 30) {
                                this.fuseWith(other);
                            }
                        }
                    }
                }
            });

            if (this.life <= 0 || this.energy <= 0) {
                this.regenerate();
            }
        }

        fuseWith(other) {
            this.size += other.size * 0.5;
            this.energy += 30;
            this.history.push(other.nftID); // Armazena histórico de fusões
            particles.splice(particles.indexOf(other), 1);
        }

        regenerate() {
            let index = particles.indexOf(this);
            if (index > -1) particles.splice(index, 1);
            particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height));
        }

        draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.shadowBlur = 20;
            ctx.shadowColor = this.color;
            ctx.fill();

            this.connections.forEach(other => {
                ctx.beginPath();
                ctx.moveTo(this.x, this.y);
                ctx.lineTo(other.x, other.y);
                ctx.strokeStyle = `rgba(255, 255, 255, 0.1)`;
                ctx.lineWidth = 1;
                ctx.stroke();
            });

            if (this.nftID) {
                ctx.fillStyle = "white";
                ctx.font = "10px Arial";
                ctx.fillText(this.nftID, this.x + 5, this.y - 5);
            }
        }
    }

    function createParticles(x, y) {
        if (particles.length < config.particleCount) {
            let numParticles = Math.random() * 3 + 2;
            for (let i = 0; i < numParticles; i++) {
                particles.push(new Particle(x, y));
            }
        }
    }

    function animateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        particles.forEach(particle => {
            particle.update();
            particle.draw();
        });

        requestAnimationFrame(animateParticles);
    }

    canvas.addEventListener("mousemove", (event) => {
        createParticles(event.x, event.y);
    });

    animateParticles();

    window.addEventListener("resize", () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });

    for (let i = 0; i < config.particleCount; i++) {
        particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height));
    }

    // Criando o Dodecaedro 3D que interage com as partículas
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });

    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const geometry = new THREE.DodecahedronGeometry(10);
    const material = new THREE.MeshStandardMaterial({ color: 0x0033ff, wireframe: true });
    const dodecahedron = new THREE.Mesh(geometry, material);

    scene.add(dodecahedron);

    const light = new THREE.PointLight(0xffffff, 1, 100);
    light.position.set(10, 10, 10);
    scene.add(light);

    camera.position.z = 20;

    function animate3D() {
        requestAnimationFrame(animate3D);
        dodecahedron.rotation.x += 0.004;
        dodecahedron.rotation.y += 0.004;

        // Reação às partículas - modifica ligeiramente a rotação
        if (particles.length > 50) {
            dodecahedron.rotation.x += 0.001;
            dodecahedron.rotation.y -= 0.001;
        }

        renderer.render(scene, camera);
    }

    animate3D();
});

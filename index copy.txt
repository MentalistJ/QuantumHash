<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QuantumHash vs. NFTs Tradicionais</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background: radial-gradient(circle, #050505, #000022);
      font-family: Arial, sans-serif;
      gap: 30px;
      color: white;
      user-select: none;
    }
    .nft-card {
      width: 300px;
      height: 400px;
      perspective: 1000px;
      cursor: grab;
      position: relative;
    }
    .nft-inner {
      width: 100%;
      height: 100%;
      position: relative;
      transform-style: preserve-3d;
      transition: transform 0.2s ease-out;
    }
    /* Faces da carta */
    .nft-front, .nft-back {
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 10px;
      backface-visibility: hidden;
      overflow: hidden;
    }
    /* Face frontal da carta tradicional */
    .traditional-card {
      background-image: url('nft.png'); /* Imagem estática para NFT Tradicional */
      background-size: cover;
      background-position: center;
      border: 2px solid rgba(255, 0, 0, 0.8);
      box-shadow: 0 0 15px rgba(255, 0, 0, 0.5);
    }
    /* Face frontal da carta QuantumHash – terá a animação (canvas + Three.js) */
    .quantum-front {
      border: 2px solid rgba(0, 255, 255, 0.8);
      box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
      position: relative;
    }
    /* Face de trás da carta QuantumHash – imagem atribuída */
    .quantum-back {
      background-image: url('quantumhash.png');
      background-size: cover;
      background-position: center;
      transform: rotateY(180deg);
      border: 2px solid rgba(0, 255, 255, 0.8);
      box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
    }
    .card-label {
      position: absolute;
      bottom: 10px;
      left: 10px;
      background: rgba(0, 0, 0, 0.6);
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 14px;
      z-index: 10;
    }
    /* Painel de informações fixo */
    .info-panel {
      position: absolute;
      top: 20px;
      left: 20px;
      background: rgba(0, 0, 0, 0.7);
      padding: 20px;
      border-radius: 10px;
      max-width: 300px;
      z-index: 100;
    }
    .info-panel h2 {
      margin-top: 0;
    }
    .info-panel p {
      font-size: 14px;
      line-height: 1.4;
    }
    /* Canvas de partículas e render Three.js serão posicionados no quantum-front */
    canvas.quantum-canvas {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      pointer-events: none;
    }
    /* Container para o render 3D */
    .three-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <!-- Painel de Informações -->
  <div class="info-panel">
    <h2>QuantumHash vs. NFTs Tradicionais</h2>
    <p><strong>NFT Tradicional:</strong> Um NFT padrão é uma imagem estática ou arte digital armazenada em uma blockchain. Ele é único, mas não possui interatividade ou dinâmica.</p>
    <p><strong>QuantumHash NFT:</strong> Um QuantumHash NFT evolui o conceito de NFT, incorporando elementos dinâmicos e interativos – animações e efeitos visuais que se geram autonomamente, com interação 3D.</p>
    <p>Arraste as cartas para girá-las e explorar as duas faces.</p>
  </div>

  <!-- Carta do NFT Tradicional -->
  <div class="nft-card" id="traditionalCard">
    <div class="nft-inner">
      <div class="nft-front traditional-card">
        <span class="card-label">NFT Tradicional</span>
      </div>
    </div>
  </div>

  <!-- Carta do NFT QuantumHash -->
  <div class="nft-card" id="quantumCard">
    <div class="nft-inner">
      <!-- Face frontal com animação -->
      <div class="nft-front quantum-front">
        <span class="card-label">QuantumHash NFT</span>
        <!-- Canvas para partículas -->
        <canvas id="quantumCanvas" class="quantum-canvas"></canvas>
        <!-- Container para o render Three.js (dodecaedro 3D) -->
        <div class="three-container" id="threeContainer"></div>
      </div>
      <!-- Face de trás com imagem -->
      <div class="nft-back quantum-back"></div>
    </div>
  </div>

  <!-- Scripts -->
  <!-- Three.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {

      /* ==========================
         Função para arrastar e girar o card
         ========================== */
      function makeCardDraggable(card) {
        const inner = card.querySelector('.nft-inner');
        let isDragging = false;
        let startX, startY;
        let currentRotationX = 0, currentRotationY = 0;

        card.addEventListener('mousedown', (e) => {
          isDragging = true;
          card.style.cursor = 'grabbing';
          startX = e.clientX;
          startY = e.clientY;
        });

        document.addEventListener('mousemove', (e) => {
          if (!isDragging) return;
          const dx = e.clientX - startX;
          const dy = e.clientY - startY;
          // Ajusta os ângulos de rotação conforme o movimento
          const rotationY = currentRotationY + dx * 0.3;
          const rotationX = currentRotationX - dy * 0.3;
          inner.style.transform = `rotateY(${rotationY}deg) rotateX(${rotationX}deg)`;
        });

        document.addEventListener('mouseup', (e) => {
          if (!isDragging) return;
          const dx = e.clientX - startX;
          const dy = e.clientY - startY;
          currentRotationY += dx * 0.3;
          currentRotationX -= dy * 0.3;
          isDragging = false;
          card.style.cursor = 'grab';
        });
      }

      // Ativa a interação para ambas as cartas
      document.querySelectorAll('.nft-card').forEach(makeCardDraggable);

      /* ==========================
         Animação QuantumHash (Partículas + 3D)
         ========================== */
      function initQuantumHash() {
        const canvas = document.getElementById("quantumCanvas");
        const ctx = canvas.getContext("2d");

        // Definindo dimensões do canvas conforme a carta (300x400)
        canvas.width = 300;
        canvas.height = 400;

        let particles = [];
        const config = {
          particleCount: 40,
          maxConnections: 8,
          connectionDistance: 50,
          fusionDistance: 30,
          hueRange: [200, 250],
          particleSpeed: 0.4,
          energyDecay: 0.04,
          maxSize: 12,
          minSize: 3
        };

        class Particle {
          constructor(x = Math.random() * canvas.width, y = Math.random() * canvas.height, nftID = null) {
            this.x = x;
            this.y = y;
            this.size = Math.random() * (config.maxSize - config.minSize) + config.minSize;
            this.speedX = (Math.random() - 0.5) * config.particleSpeed;
            this.speedY = (Math.random() - 0.5) * config.particleSpeed;
            this.color = this.generateColor();
            this.connections = [];
            this.life = Math.random() * 400 + 300;
            this.state = Math.random() > 0.5 ? "wave" : "particle"; 
            this.nftID = nftID || this.generateHash();
            this.energy = Math.random() * 100;
            this.history = [];
          }

          generateColor() {
            return `hsl(${Math.random() * (config.hueRange[1] - config.hueRange[0]) + config.hueRange[0]}, 100%, 70%)`;
          }

          generateHash() {
            return Math.random().toString(36).substring(2, 12);
          }

          update() {
            this.x += this.speedX;
            this.y += this.speedY;
            this.life--;
            this.energy -= config.energyDecay;
            if (this.size > config.minSize) this.size -= 0.02;
            // Mutações de estado para efeito quântico
            if (Math.random() > 0.996) {
              this.state = this.state === "wave" ? "particle" : "wave";
              this.size = Math.random() * (config.maxSize - config.minSize) + config.minSize;
              this.color = this.generateColor();
              this.nftID = this.generateHash();
            }
            this.connections = [];
            particles.forEach(other => {
              if (other !== this) {
                let dx = other.x - this.x;
                let dy = other.y - this.y;
                let distance = Math.sqrt(dx * dx + dy * dy);
                if (distance < config.connectionDistance) {
                  this.connections.push(other);
                  if (distance < config.fusionDistance && Math.random() > 0.99) {
                    if (this.energy > 30 && other.energy > 30) {
                      this.fuseWith(other);
                    }
                  }
                }
              }
            });
            if (this.life <= 0 || this.energy <= 0) {
              this.regenerate();
            }
          }

          fuseWith(other) {
            this.size += other.size * 0.5;
            this.energy += 30;
            this.history.push(other.nftID);
            particles.splice(particles.indexOf(other), 1);
          }

          regenerate() {
            let index = particles.indexOf(this);
            if (index > -1) particles.splice(index, 1);
            particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height));
          }

          draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.shadowBlur = 20;
            ctx.shadowColor = this.color;
            ctx.fill();
            // Linhas de conexão entre partículas
            this.connections.forEach(other => {
              ctx.beginPath();
              ctx.moveTo(this.x, this.y);
              ctx.lineTo(other.x, other.y);
              ctx.strokeStyle = `rgba(255, 255, 255, 0.1)`;
              ctx.lineWidth = 1;
              ctx.stroke();
            });
            // Exibe o hash (ID) da partícula
            if (this.nftID) {
              ctx.fillStyle = "white";
              ctx.font = "10px Arial";
              ctx.fillText(this.nftID, this.x + 5, this.y - 5);
            }
          }
        }

        // Inicializa partículas
        for (let i = 0; i < config.particleCount; i++) {
          particles.push(new Particle());
        }

        // Cria partículas extra próximo ao mouse para interatividade
        canvas.addEventListener("mousemove", (event) => {
          const rect = canvas.getBoundingClientRect();
          const x = event.clientX - rect.left;
          const y = event.clientY - rect.top;
          let numParticles = Math.random() * 3 + 2;
          for (let i = 0; i < numParticles; i++) {
            particles.push(new Particle(x, y));
          }
        });

        function animateParticles() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          particles.forEach(particle => {
            particle.update();
            particle.draw();
          });
          requestAnimationFrame(animateParticles);
        }
        animateParticles();
      } // fim initQuantumHash

      initQuantumHash();

      /* ==========================
         Render 3D com Three.js – Dodecaedro animado
         ========================== */
      function initThreeJS() {
        const container = document.getElementById("threeContainer");
        const width = container.clientWidth;
        const height = container.clientHeight;
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        renderer.setSize(width, height);
        container.appendChild(renderer.domElement);

        const geometry = new THREE.DodecahedronGeometry(5);
        const material = new THREE.MeshStandardMaterial({ color: 0x0033ff, wireframe: true });
        const dodecahedron = new THREE.Mesh(geometry, material);
        scene.add(dodecahedron);

        const light = new THREE.PointLight(0xffffff, 1, 100);
        light.position.set(10, 10, 10);
        scene.add(light);

        camera.position.z = 10;

        function animate3D() {
          requestAnimationFrame(animate3D);
          dodecahedron.rotation.x += 0.004;
          dodecahedron.rotation.y += 0.004;
          renderer.render(scene, camera);
        }
        animate3D();
      }

      initThreeJS();

    }); // Fim DOMContentLoaded
  </script>
</body>
</html>
